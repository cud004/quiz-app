/**
 * C·∫•u h√¨nh CORS ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a cho ph√©p frontend k·∫øt n·ªëi v·ªõi API
 * - Qu·∫£n l√Ω whitelist hi·ªáu qu·∫£ h∆°n
 * - X·ª≠ l√Ω logic r√µ r√†ng cho c√°c m√¥i tr∆∞·ªùng
 * - C·∫£i thi·ªán logging ƒë·ªÉ debug
 */
const corsOptions = {
  origin: function (origin, callback) {
    // Danh s√°ch c√°c domain ƒë∆∞·ª£c ph√©p truy c·∫≠p
    const whitelist = [
      process.env.FRONTEND_URL,
      'http://localhost:3000',
      'http://localhost:5173',
      'http://localhost:8080',
      'https://sandbox.vnpayment.vn',
      'https://ik.imagekit.io/c3dq7il1wp/',

    ].filter(Boolean); // Lo·∫°i b·ªè c√°c gi√° tr·ªã null/undefined
    
    // Ki·ªÉm tra xem origin c√≥ ch·ª©a ngrok kh√¥ng
    const isNgrokOrigin = origin && origin.includes('ngrok');
    
    // Log th√¥ng tin ƒë·ªÉ debug
    console.log('CORS Request from:', origin || 'No origin (server-to-server)');
    
    if (process.env.NODE_ENV === 'production') {
      // Trong m√¥i tr∆∞·ªùng production
      if (!origin || whitelist.includes(origin) || isNgrokOrigin) {
        console.log('‚úÖ CORS: Allowing request from:', origin || 'No origin');
        callback(null, true);
      } else {
        console.log('‚ùå CORS: Blocking request from:', origin);
        callback(new Error(`Origin ${origin} kh√¥ng ƒë∆∞·ª£c ph√©p b·ªüi CORS`));
      }
    } else {
      // Trong m√¥i tr∆∞·ªùng development - cho ph√©p t·∫•t c·∫£
      console.log('üîß CORS: Development mode - allowing all origins');
      callback(null, true);
    }
  },
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: [
    'Content-Type',
    'Authorization',
    'X-Requested-With',
    'Accept',
    'Origin',
    'ngrok-skip-browser-warning'
  ],
  exposedHeaders: ['Content-Range', 'X-Total-Count'],
  credentials: true,
  optionsSuccessStatus: 204, // Th∆∞·ªùng 204 ƒë∆∞·ª£c khuy·∫øn ngh·ªã h∆°n cho OPTIONS
  maxAge: 86400 // TƒÉng l√™n 24 gi·ªù ƒë·ªÉ gi·∫£m requests preflight
};

module.exports = corsOptions;