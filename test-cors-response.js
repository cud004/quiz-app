const axios = require('axios');

// C·∫•u h√¨nh cho API endpoint
const API_URL = process.env.API_URL || 'http://localhost:5000/api';
const FRONTEND_URL = process.env.FRONTEND_URL || 'http://localhost:3000';

/**
 * Test CORS configuration
 */
async function testCORS() {
  console.log('üîç Ki·ªÉm tra c·∫•u h√¨nh CORS...\n');
  
  try {
    const response = await axios.get(`${API_URL}/auth/me`, {
      headers: {
        'Origin': FRONTEND_URL,
        'Access-Control-Request-Method': 'GET',
      }
    });
    
    console.log('‚úÖ CORS preflight request th√†nh c√¥ng');
    console.log('Headers tr·∫£ v·ªÅ:', response.headers);
    
    // Ki·ªÉm tra CORS headers
    if (response.headers['access-control-allow-origin']) {
      console.log(`‚úÖ access-control-allow-origin: ${response.headers['access-control-allow-origin']}`);
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y header access-control-allow-origin');
    }
    
    if (response.headers['access-control-allow-methods']) {
      console.log(`‚úÖ access-control-allow-methods: ${response.headers['access-control-allow-methods']}`);
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y header access-control-allow-methods');
    }
    
    if (response.headers['access-control-allow-credentials']) {
      console.log(`‚úÖ access-control-allow-credentials: ${response.headers['access-control-allow-credentials']}`);
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y header access-control-allow-credentials');
    }
    
    console.log('\n‚úÖ C·∫•u h√¨nh CORS ho·∫°t ƒë·ªông ƒë√∫ng!');
  } catch (error) {
    console.error('‚ùå L·ªói ki·ªÉm tra CORS:', error.message);
    
    if (error.response) {
      console.log('Headers tr·∫£ v·ªÅ:', error.response.headers);
    }
  }
}

/**
 * Test API response format
 */
async function testResponseFormat() {
  console.log('\nüîç Ki·ªÉm tra ƒë·ªãnh d·∫°ng response chu·∫©n...\n');
  
  // Array of test endpoints
  const testEndpoints = [
    { method: 'GET', url: `${API_URL}/subscriptions`, name: 'Get Subscription Packages' },
    { method: 'GET', url: `${API_URL}/topics`, name: 'Get Topics' },
    { method: 'GET', url: `${API_URL}/tags`, name: 'Get Tags' },
    { method: 'POST', url: `${API_URL}/auth/login`, data: { email: 'test@example.com', password: 'wrong-password' }, name: 'Login (Expected to fail)' }
  ];
  
  for (const endpoint of testEndpoints) {
    console.log(`üîç Ki·ªÉm tra endpoint: ${endpoint.name} (${endpoint.method} ${endpoint.url})`);
    
    try {
      let response;
      if (endpoint.method === 'GET') {
        response = await axios.get(endpoint.url);
      } else if (endpoint.method === 'POST') {
        response = await axios.post(endpoint.url, endpoint.data);
      }
      
      console.log(`‚úÖ Status code: ${response.status}`);
      
      // Ki·ªÉm tra format response
      if (response.data.hasOwnProperty('success')) {
        console.log(`‚úÖ C√≥ tr∆∞·ªùng 'success': ${response.data.success}`);
      } else {
        console.log('‚ùå Kh√¥ng c√≥ tr∆∞·ªùng success');
      }
      
      if (response.data.hasOwnProperty('message')) {
        console.log(`‚úÖ C√≥ tr∆∞·ªùng 'message': ${response.data.message}`);
      } else {
        console.log('‚ùå Kh√¥ng c√≥ tr∆∞·ªùng message');
      }
      
      if (response.data.hasOwnProperty('data') || 
          endpoint.method === 'POST' && !response.data.success) {
        console.log('‚úÖ C√≥ tr∆∞·ªùng data ho·∫∑c ƒë√¢y l√† tr∆∞·ªùng h·ª£p l·ªói login');
      } else {
        console.log('‚ùå Kh√¥ng c√≥ tr∆∞·ªùng data');
      }
      
      console.log('üîç C·∫•u tr√∫c response:', Object.keys(response.data));
      console.log('-------------------------------------');
    } catch (error) {
      console.log(`‚ö†Ô∏è Endpoint tr·∫£ v·ªÅ l·ªói (c√≥ th·ªÉ l√† d·ª± ki·∫øn): ${error.message}`);
      
      if (error.response) {
        console.log(`‚úÖ Status code: ${error.response.status}`);
        
        // Ki·ªÉm tra format response l·ªói
        if (error.response.data.hasOwnProperty('success')) {
          console.log(`‚úÖ C√≥ tr∆∞·ªùng 'success': ${error.response.data.success}`);
        } else {
          console.log('‚ùå Kh√¥ng c√≥ tr∆∞·ªùng success');
        }
        
        if (error.response.data.hasOwnProperty('message')) {
          console.log(`‚úÖ C√≥ tr∆∞·ªùng 'message': ${error.response.data.message}`);
        } else {
          console.log('‚ùå Kh√¥ng c√≥ tr∆∞·ªùng message');
        }
        
        console.log('üîç C·∫•u tr√∫c response l·ªói:', Object.keys(error.response.data));
      }
      
      console.log('-------------------------------------');
    }
  }
}

/**
 * Main function
 */
async function main() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra c·∫•u h√¨nh CORS v√† ƒë·ªãnh d·∫°ng response...\n');
  
  // Ki·ªÉm tra CORS
  await testCORS();
  
  // Ki·ªÉm tra ƒë·ªãnh d·∫°ng response
  await testResponseFormat();
  
  console.log('\n‚úÖ ƒê√£ ho√†n th√†nh ki·ªÉm tra!');
}

// Ch·∫°y script
main().catch(console.error); 